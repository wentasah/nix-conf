#!/usr/bin/env bash

# Script to rebuild my system(s) when something changes. I'm running
# this from a cron job on a server.
#
# Usage: nix-conf [update|build] [nix build options]
#
# With no sub-command, update is implied.
#
# Example: nix-conf build --log-format raw

set -euo pipefail

was_head_changed() {
    local old_tree=$(git rev-parse HEAD^{tree})
    "$@" || exit 1
    local new_tree=$(git rev-parse HEAD^{tree})
    if [[ $old_tree != $new_tree ]]; then
        echo "!!! Tree hash in $PWD changed from $old_tree to $new_tree"
        return 0
    fi
    return 1
}

exit_if_dirty() {
    if ! git diff-index --quiet HEAD --; then
        echo >&2 "$PWD dirty!"
        exit 1
    fi
}

update_nix_conf() {
    cd ~/nix/conf
    # The following must be on a single line so that update of the script via git pull works.
    if was_head_changed git pull --quiet https://github.com/wentasah/nix-conf.git; then
        WAS_RERUN=0 exec $0
    fi

    # Git repo was not changed - report the result based on the value of RERUN variable.
    local ret=${WAS_RERUN:-1}
    unset WAS_RERUN
    return "$ret"
}

merge_nixpkgs_topics_into_master() {
    cd ~/nix/nixpkgs

    git checkout --quiet master
    git reset --keep nixos-unstable

    local commit_msg='automatic merge by nix-conf'
    if [[ -f .git/machete ]]; then
        # On my laptop - merge all non-root branches managed by git-machete
        readarray -t to_merge < <(sed -nE '/^[[:space:]]+/ s///p' .git/machete)
        commit_msg+=$'\n'$'\n'"Merged branches:${to_merge[@]/#/$'\n'- }"
    else
        # CI: Recreate the merge from HEAD of my repo
        ## git fetch . test
        if [[ $(git show wentasah/master) == *"$commit_msg"* ]]; then
            readarray -t to_merge < <(git cat-file -p wentasah/master | sed -ne '/^parent / s///p')
            commit_msg=$(git show --format='%B' --no-patch wentasah/master) # Use the same commit message
        else
            echo >&2 "HEAD of $(git config remote.wentasah.url) is not a merge commit created by nix-conf"
            exit 1
        fi
    fi
    git merge --quiet --no-ff --no-commit "${to_merge[@]}"
    GIT_AUTHOR_DATE=$(git show nixos-unstable --format='%aD') \
    GIT_COMMITTER_DATE=$(git show nixos-unstable --format='%cD') \
    git commit -m "$commit_msg"
}

update_nixpkgs() {
    cd ~/nix/nixpkgs
    exit_if_dirty

    update_nixpkgs_and_merge_topics() {
        git fetch --quiet origin
        git fetch --quiet wentasah
        git update-ref refs/heads/nixos-unstable origin/nixos-unstable
        merge_nixpkgs_topics_into_master
    }

    was_head_changed update_nixpkgs_and_merge_topics \
        && echo "nixpkgs upstream commit: $(git rev-parse origin/nixos-unstable)"
}

update_home_manager() {
    cd ~/nix/home-manager
    was_head_changed git pull --quiet
}

updated() {
    local result=1
    update_nix_conf && result=0
    #update_home_manager && result=0
    update_nixpkgs && result=0
    return $result
}

failed_recently() {
    cnt=~/nix/out/steelpick/flake.retry.cnt
    if [[ -s ~/nix/out/steelpick/flake.error ]] &&
       [[ $(cat $cnt) -lt 2 ]]; then
        echo $(( $(cat $cnt) + 1 )) > $cnt
        return 0
    else
        return 1
    fi
}

build() {
    cd ~/nix

    PATH=/nix/var/nix/profiles/default/bin:$PATH
    local old_version=$(readlink out/steelpick/flake || :)
    if [[ -f conf/flake.nix ]]; then
        local status=0
        (
            if ! tty -s; then
                exec > out/steelpick/flake.log
            else
                : > out/steelpick/flake.log
            fi
            nix build \
                "$@" \
                --out-link out/steelpick/flake \
                --override-input nixpkgs ./nixpkgs \
                ./conf#nixosConfigurations.steelpick.config.system.build.toplevel 2>&1
        ) || status=$?
        if [[ $status -eq 0 ]]; then
            : > out/steelpick/flake.error
            rm -f out/steelpick/flake.retry.cnt
        else
            # we use cat instead of mv to not break hardlinks to the flake.error
            cat out/steelpick/flake.log > out/steelpick/flake.error
            touch out/steelpick/flake.retry.cnt
            exit $status
        fi

        if [[ $(hostname) = "steelpick" ]]; then
            echo "Diff from current configuration:"
            nix store diff-closures /run/current-system ~/nix/out/steelpick/flake
            echo
            echo "Run one of the following to switch the configuration:"
            echo "  sudo nix-conf switch"
            echo "  sudo nixos-rebuild switch --override-input nixpkgs ~/nix/nixpkgs"
        else
            (
                cd nixpkgs
                if git diff --quiet wentasah/ci; then
                    return
                fi
                git push --force wentasah HEAD:ci

	        local old_commit=$(git rev-parse history)
	        local new_commit=$(git commit-tree -p "$old_commit" -p HEAD "HEAD^{tree}" -m "update history branch")
	        git update-ref refs/heads/history "$new_commit" "$old_commit"
                git push wentasah history
            )
            if [[ $old_version != $(readlink out/steelpick/flake) ]]; then
                matrix-commander --markdown -m "nix-conf CI update completed

$(nix store diff-closures $old_version out/steelpick/flake | ansifilter | sed -e 's/^/    /')" || :
            fi
        fi
    else
        export NIX_PATH=nixpkgs=$PWD/nixpkgs:nixos-hardware=$PWD/nixos-hardware
        export NIXOS_CONFIG=$PWD/conf/steelpick/configuration.nix

        mkdir -p out/steelpick/nixos
        (
            cd out/steelpick/nixos
            nix-shell -p nixos-rebuild --run "nixos-rebuild build --keep-going"
        )

        mkdir -p out/steelpick/home
        (
            cd out/steelpick/home
            nix-shell -E 'with import <nixpkgs> { }; runCommand "dummy" { buildInputs = [ (import ~/nix/home-manager {}).home-manager ]; } ""' \
                      --run "home-manager build --keep-going -f ~/nix/conf/steelpick/home.nix"
        )
    fi
}

switch() {
    local O="/home/${SUDO_USER:-$USER}/nix/out/steelpick/flake"
    nix-env -p /nix/var/nix/profiles/system --set "$O"
    "$O"/bin/switch-to-configuration switch
}

push() {
    cd ~/nix/nixpkgs
    git push --force-with-lease wentasah master:master
    git push wentasah nixos-unstable:nixos-unstable
    cd ~/nix/conf
    nix flake lock --update-input nixpkgs --commit-lock-file
    git push
}

add_commits() {
    local branch="${1:?no branch given}";
    shift
    git checkout -B "$branch" nixos-unstable
    git cherry-pick "${@:?no commits specified}"
    git-machete add
    merge_nixpkgs_topics_into_master
}

add_pr() {
    local pr="${1:?no PR number given}";
    local branch="${2:?no branch given}";
    git fetch origin refs/pull/"$pr"/head
    add_commits "$branch" FETCH_HEAD ^origin/master ^origin/staging
}

if [[ ${1:-} ]] && [[ $1 != -* ]]; then
    cmd=$1
    shift
else
    cmd=update
fi

export GIT_AUTHOR_NAME=nix-conf
export GIT_AUTHOR_EMAIL=nix-conf@localhost
export GIT_COMMITTER_NAME=nix-conf
export GIT_COMMITTER_EMAIL=nix-conf@localhost

case "$cmd" in
    "update")
        if updated || failed_recently; then
            build "$@"
        else
            echo "No input has changed. Exiting."
        fi;;
    "build")
        build "$@";;
    "merge")
        merge_nixpkgs_topics_into_master;;
    "switch")
        switch;;
    "push")
        push;;
    "add-pr")
        add_pr "$@";;
    "add-commits")
        add_commits "$@";;
    *)
        echo >&2 "Unknown command: $cmd"
esac
